name: DevSecOps Netflix Clone

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Check Docker
        run: docker --version

      - name: Start Docker Service
        run: sudo service docker start

      - name: Build the Docker image
        run: |
          docker build . --file Dockerfile --tag netflix-clone:latest

      - name: List Docker Images
        run: docker images

      - name: Save Docker Image as Artifact
        run: docker save netflix-clone:latest -o netflix-clone.tar
        
      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: netflix-clone.tar


  trivy_scan:
    runs-on: ubuntu-latest
    needs: build
    steps:


      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image

      - name: Load Docker Image
        run: docker load -i netflix-clone.tar
        
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release -y
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy -y

      - name: Scan Docker Image
        run: trivy image netflix-clone:latest > trivy-report.txt

      - name: Upload Trivy Report
        uses: actions/upload-artifact@v3
        with:
          name: trivy-report
          path: trivy-report.txt

  sonar_analysis:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image

      - name: Load Docker Image
        run: docker load -i netflix-clone.tar

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: .
          args: >
            -Dsonar.organization=my-org
            -Dsonar.projectKey=netflix-clone 
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  OWASP-Dependency-Check:
    needs: sonar_analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Java
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      # Install unzip (if not available)
      - name: Install unzip
        run: sudo apt-get update && sudo apt-get install -y unzip

      # Install OWASP Dependency-Check
      - name: Install OWASP Dependency-Check
        run: |
          curl -L -o dependency-check.zip https://github.com/jeremylong/DependencyCheck/releases/download/v8.2.1/dependency-check-8.2.1-release.zip
          unzip dependency-check.zip -d $HOME/dependency-check
          chmod +x $HOME/dependency-check/dependency-check/bin/dependency-check.sh

      # Create output directory for reports
      - name: Create output directory
        run: mkdir -p dependency-check-report

     # Run OWASP Dependency-Check SCA
      - name: Run OWASP Dependency-Check
        env:
          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
        continue-on-error: true
        run: |
          npm install
          $HOME/dependency-check/dependency-check/bin/dependency-check.sh \
            --project "My Project" \
            --scan $(pwd) \
            --format "ALL" \
            --out dependency-check-report \
            --failOnCVSS 9

  push_to_dockerhub:
    runs-on: ubuntu-latest
    needs: [build, trivy_scan, OWASP-Dependency-Check]
    steps:
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image
  
      - name: Load Docker Image
        run: docker load -i netflix-clone.tar
  
      - name: Login to Docker Hub
        env:
           DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
           DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
            echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin
  
      - name: Tag Docker Image
        run: docker tag netflix-clone:latest ${{ secrets.DOCKER_USERNAME }}/netflix-clone:latest

      - name: Push Docker Image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/netflix-clone:latest


  create-cluster:
    runs-on: ubuntu-latest
    needs: push_to_dockerhub
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
  
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
  
      - name: Install eksctl
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          eksctl version
  
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client
  
      - name: Check if Cluster Exists
        id: check-cluster
        run: |
          echo "Checking if the cluster exists..."
          eksctl get cluster --name netflix-clone-cluster --region us-east-1 > /dev/null 2>&1 && echo "exists=true" || echo "exists=false"
  
      - name: Create EKS Cluster
        if: steps.check-cluster.outputs.exists == 'false'
        run: |
          eksctl create cluster \
            --name netflix-clone-cluster \
            --region us-east-1 \
            --nodegroup-name standard-workers \
            --node-type t3.medium \
            --nodes 3 \
            --nodes-min 2 \
            --nodes-max 4 \
            --managed
  
      - name: Configure kubeconfig and Wait for Nodes
        run: |
          aws eks update-kubeconfig --region us-east-1 --name netflix-clone-cluster
          echo "Waiting for nodes to become ready..."
          for i in {1..10}; do
            READY_NODES=$(kubectl get nodes --no-headers 2>/dev/null | grep -c "Ready")
            if [ "$READY_NODES" -ge 3 ]; then
              echo "Nodes are ready!"
              kubectl get nodes
              break
            fi
            echo "Waiting for nodes to be ready..."
            sleep 30
          done


  deploy-app:
    runs-on: ubuntu-latest
    needs: create-cluster
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client

      - name: Deploy Application to EKS
        run: |
          echo "Applying Kubernetes manifests..."
          kubectl apply -f Kubernetes/deployment.yml
          kubectl apply -f Kubernetes/node-service.yml
          kubectl apply -f Kubernetes/service.yml
          echo "Waiting for deployment to complete..."
          kubectl rollout status deployment/netflix-clone

      - name: Wait for LoadBalancer External IP
        run: |
          echo "Waiting for LoadBalancer external IP..."
          for i in {1..20}; do
            EXTERNAL_IP=$(kubectl get svc netflix-clone-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null)
            if [ -n "$EXTERNAL_IP" ]; then
              echo "Service is available at: http://$EXTERNAL_IP"
              break
            fi
            echo "Waiting for external IP..."
            sleep 15
          done
